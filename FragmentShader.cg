//******************************************************************************//
//									        //
//		- Bump Mapping Using CG	-				        //
//                                                                              //
//		$Author:	Søren Dreijer (Halloko)		                //
//										//
//		$Date:		05/09/04				        //
//										//
//		$Homepage:	http://www.blacksmith-studios.dk	        //
//				        					//
//		$Copyright:     You're free to distribute and modify the	//
//				entire source code as you please.		//
//				However, it should clearly show where the	//
//				code originates from!				//
//										//
//		© 2004 Søren Dreijer						//
//										//
//******************************************************************************//

void main(in float4 colorIN : COLOR0,
	  in float2 texCoords : TEXCOORD0,			// The texture map's texcoords
	  in float2 normalCoords : TEXCOORD1,			// The normal map's texcoords
	  in float3 vLightVector : TEXCOORD2,			// The transformed light vector (it is in tangent space)

	  out float4 colorOUT : COLOR0,				// The final color of the current pixel

	  uniform sampler2D baseTexture : TEXUNIT0,	        // The whole rock texture map
	  uniform sampler2D normalTexture : TEXUNIT1,           // The whole normal map
	  uniform float3 fLightDiffuseColor)			// The diffuse color of the light source
{
	// Since the normals in the normal map are in the (color) range [0, 1] we need to uncompress them
	// to "real" normal (vector) directions.
	// Decompress vector ([0, 1] -> [-1, 1])
	float3 vNormal = 2.0f * (tex2D(normalTexture, normalCoords).rgb - 0.5f);
	
	// Calculate the diffuse component and store it as the final color in 'colorOUT'
	// The diffuse component is defined as: I = Dl * Dm * clamp(L•N, 0, 1)
	// saturate() works just like clamp() apart from that it implies a clamping between [0;1]
	colorOUT.rgb = saturate(dot(vLightVector, vNormal)) * tex2D(baseTexture, texCoords).rgb * fLightDiffuseColor;
	colorIN.rgb = saturate(dot(vLightVector, vNormal)) * tex2D(baseTexture, texCoords).rgb * fLightDiffuseColor;
}